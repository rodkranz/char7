// Code generated by go-bindata.
// sources:
// .c7map
// DO NOT EDIT!

package chatdata

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _C7map = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xa4\xd7\xc9\x8a\x13\x51\x18\x05\xe0\x7d\x9e\xa2\x28\xc1\x55\x36\xa2\x60\xd4\x95\x84\x40\xdc\x24\x20\x71\x21\xe2\xa2\xa8\xba\x26\x17\x2b\x55\x58\x43\x20\x8a\xe0\x3c\xcf\xf3\x3c\xc5\x79\xea\x79\xee\x74\x20\x79\xa0\x7e\x85\x26\xa1\xa1\x37\xff\xe1\x3f\xd0\xbd\xe8\x45\x85\x8f\xd4\x39\x7f\xd5\xbd\xb9\xa7\x0a\x8e\xe3\x38\x17\x26\xff\xc7\x7f\xee\x59\xd3\x75\x0f\x3b\xee\x70\xcd\x2d\xee\x5c\xec\x78\x61\x6e\xc6\x97\xf7\xee\xd9\x57\x3a\x78\xc4\x9d\x7c\x72\xb1\x88\xec\x3a\xb4\x25\xd5\xf6\xa1\x3d\xa4\xda\x0d\xd9\x9e\x49\x3c\x7f\xff\x01\x55\x0f\x64\x6d\xcf\xe5\x26\xcd\x34\x3d\x7a\x29\xeb\xcc\xb6\x4d\xaa\xe2\x25\x19\x07\xb6\x63\x03\xa3\xea\x4b\xb2\x3e\xda\x4c\xbc\x8e\xae\x2f\x03\xed\xf9\x79\xa6\xeb\x2b\x40\xfb\x36\xf1\x55\x7c\x15\xe0\xcc\x86\x44\xec\xeb\x40\x27\x36\x6a\xaa\xf8\xda\x6e\xf0\x0d\x80\x2b\xa1\xd5\xf1\x4d\x19\x97\x7d\x13\xd8\x50\xd5\xb7\x64\x5d\xe1\x66\x7d\x1b\x68\x6e\xd6\x77\x80\x2e\x33\xb3\xbe\x0b\x70\xde\xd6\x43\xdf\x93\xed\x31\x2e\xf4\x7d\xa0\xb9\xd0\x0f\x80\xa6\x1e\xf0\x87\x00\x33\xa1\x1f\x81\xc2\x1a\x55\x95\x3e\x96\x69\x8d\x7b\xaf\x9e\xc8\xba\xce\xb5\xfd\x14\x68\xae\xed\x67\x40\x53\x6d\x3f\x07\x98\x8b\xfd\x02\x68\x66\x56\xaf\x80\x4d\x43\x2f\x6d\xa9\xfa\xb5\xac\x4f\x70\x85\xbf\x01\x9a\x2b\xfc\x2d\xd0\x54\xe1\xef\x00\x66\x2a\x7b\x2f\xdb\x93\xdc\x6d\x7f\x90\x75\xa3\x5a\x3f\x5e\x53\xf1\x47\x19\xa7\xe7\x99\xe5\xfb\x93\x8c\x3d\x6e\x58\x9f\x81\xe6\x52\x7f\x01\x9a\x1a\x56\x0f\x60\xee\xed\xf8\x06\x34\xb5\x5f\x7e\x95\x31\xf3\x98\x7c\x07\xdf\x6b\x98\x59\xfd\x90\xb1\xcf\x6d\xb5\x3f\x65\x6d\xb8\x49\xff\x02\x9a\x9b\xf4\x6f\xa0\xa9\x49\xff\x01\x98\xe9\xfb\x2f\xf8\x11\xcc\x85\xfe\x07\x34\x17\xfa\x3f\xd0\x54\xe8\x29\x80\x99\xd0\xd3\xa0\xb0\x4c\x5f\xbb\x67\x64\x1a\x71\x6f\xd5\xac\xac\x63\xae\xed\x39\xa0\xb9\xb6\xe7\x81\xa6\xda\x5e\x00\x98\x8b\xbd\x08\x34\x33\xab\x65\x60\xb9\xad\x76\x05\xac\x44\x5c\xe1\xab\x40\x73\x85\x83\x13\x75\x4e\x15\x0e\x8e\xd4\x39\x53\x19\x38\x52\x77\xb9\xdb\x06\x87\xea\xac\x15\x27\x91\x8a\xc1\x99\xba\x4b\xdc\xf6\x10\xb4\x1d\x27\x41\x5b\xb5\x60\x29\x49\x8c\xba\x69\x44\x9b\x83\x7e\x2c\xea\x68\xd4\x8b\xb7\x71\xe1\x74\x61\x2b\x00\x00\xff\xff\xf0\xd8\x6c\x40\x39\x11\x00\x00")

func C7mapBytes() ([]byte, error) {
	return bindataRead(
		_C7map,
		".c7map",
	)
}

func C7map() (*asset, error) {
	bytes, err := C7mapBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: ".c7map", size: 4409, mode: os.FileMode(420), modTime: time.Unix(1510142106, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	".c7map": C7map,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	".c7map": &bintree{C7map, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
